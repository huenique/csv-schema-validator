"""
Scraper Integration Helpers
===========================

Helper functions for integrating validation into scraper workflows.
"""

import sys
from pathlib import Path
from typing import Optional, Union

from ..schemas import LISTING_SCHEMA, SELLER_SCHEMA
from ..validators import CSVSchemaValidator


class ScraperIntegration:
    """Integration helper for scrapers."""

    def __init__(self, base_directory: Union[str, Path]):
        """Initialize scraper integration."""
        self.base_directory = Path(base_directory)

    def validate_outputs(self, fail_on_error: bool = True) -> bool:
        """
        Validate all CSV outputs in scraper directory.

        Args:
            fail_on_error: Whether to exit with error code on validation failure

        Returns:
            True if all validations passed, False otherwise
        """
        print("🔍 Running post-scraper CSV validation...")

        # Find CSV files
        seller_csvs = list(self.base_directory.glob("*Seller_rows*.csv"))
        listing_csvs = list(self.base_directory.glob("*Listing_rows*.csv"))

        validation_passed = True

        # Validate seller CSVs
        for csv_file in seller_csvs:
            print(f"Validating Seller CSV: {csv_file.name}")
            validator = CSVSchemaValidator(SELLER_SCHEMA)
            validator.schema_name = "seller"
            result = validator.validate_file(csv_file)

            if result.is_valid:
                print(f"  ✅ {csv_file.name} passed validation")
            else:
                print(
                    f"  ❌ {csv_file.name} failed validation ({result.error_count} errors)"
                )
                validation_passed = False

                # Show first few errors
                for issue in result.issues[:3]:
                    print(f"    - {issue.description}")

        # Validate listing CSVs
        for csv_file in listing_csvs:
            print(f"Validating Listing CSV: {csv_file.name}")
            validator = CSVSchemaValidator(LISTING_SCHEMA)
            validator.schema_name = "listing"
            result = validator.validate_file(csv_file)

            if result.is_valid:
                print(f"  ✅ {csv_file.name} passed validation")
            else:
                print(
                    f"  ❌ {csv_file.name} failed validation ({result.error_count} errors)"
                )
                validation_passed = False

                # Show first few errors
                for issue in result.issues[:3]:
                    print(f"    - {issue.description}")

        if validation_passed:
            print("🎉 All CSV files passed schema validation!")
        else:
            print("💥 Some CSV files failed validation - please review data quality")

            if fail_on_error:
                sys.exit(1)

        return validation_passed

    def create_validation_hook(
        self, hook_path: Optional[Union[str, Path]] = None
    ) -> Path:
        """
        Create post-scraper validation hook script.

        Args:
            hook_path: Path where to create the hook script

        Returns:
            Path to created hook script
        """
        if hook_path is None:
            hook_path = self.base_directory / "validate_csv_outputs.sh"
        else:
            hook_path = Path(hook_path)

        hook_script = f'''#!/bin/bash

# CSV Schema Validation Hook
# Auto-generated by csv-schema-validator

set -e

SCRAPER_DIR="{self.base_directory.absolute()}"
echo "🔍 Running CSV schema validation for $SCRAPER_DIR"

# Activate virtual environment if it exists
if [ -f "$SCRAPER_DIR/.venv/bin/activate" ]; then
    source "$SCRAPER_DIR/.venv/bin/activate"
    echo "Activated virtual environment"
fi

# Find and validate CSV files
validation_failed=0

# Validate Seller CSVs
SELLER_CSVS=$(find "$SCRAPER_DIR" -name "*Seller_rows*.csv" 2>/dev/null || true)
for csv_file in $SELLER_CSVS; do
    echo "Validating Seller CSV: $(basename $csv_file)"
    if ! csv-schema-validator validate --schema-type seller --file "$csv_file"; then
        echo "❌ Seller CSV validation failed: $csv_file"
        validation_failed=1
    fi
done

# Validate Listing CSVs
LISTING_CSVS=$(find "$SCRAPER_DIR" -name "*Listing_rows*.csv" 2>/dev/null || true)
for csv_file in $LISTING_CSVS; do
    echo "Validating Listing CSV: $(basename $csv_file)"
    if ! csv-schema-validator validate --schema-type listing --file "$csv_file"; then
        echo "❌ Listing CSV validation failed: $csv_file"
        validation_failed=1
    fi
done

if [ $validation_failed -eq 1 ]; then
    echo "💥 CSV schema validation failed - please review data quality"
    exit 1
else
    echo "✅ All CSV files passed schema validation"
    exit 0
fi
'''

        hook_path.write_text(hook_script)
        hook_path.chmod(0o755)  # Make executable

        print(f"📝 Created validation hook: {hook_path}")
        print(f"Usage: {hook_path}")

        return hook_path


def create_post_scraper_hook(
    scraper_directory: Union[str, Path], hook_name: str = "validate_outputs.py"
) -> Path:
    """
    Create a Python post-scraper validation hook.

    Args:
        scraper_directory: Directory containing the scraper
        hook_name: Name of the hook file

    Returns:
        Path to created hook file
    """
    scraper_dir = Path(scraper_directory)
    hook_path = scraper_dir / hook_name

    hook_code = f'''#!/usr/bin/env python3
"""
CSV Schema Validation Hook
==========================

Auto-generated post-scraper validation hook.
Run this after your scraper completes to validate CSV outputs.
"""

import sys
from pathlib import Path

# Add csv-schema-validator to path if installed as submodule
sys.path.insert(0, str(Path(__file__).parent / "csv-schema-validator/src"))

from csv_schema_validator.integrations.scrapers import ScraperIntegration


def main():
    """Run CSV validation for scraper outputs."""
    scraper_dir = Path(__file__).parent
    integration = ScraperIntegration(scraper_dir)
    
    success = integration.validate_outputs(fail_on_error=False)
    
    if success:
        print("\\n🎉 All CSV files passed validation!")
        return 0
    else:
        print("\\n💥 Some CSV files failed validation!")
        return 1


if __name__ == "__main__":
    sys.exit(main())
'''

    hook_path.write_text(hook_code)
    hook_path.chmod(0o755)  # Make executable

    print(f"📝 Created Python validation hook: {hook_path}")

    return hook_path


def integrate_with_scraper(
    scraper_directory: Union[str, Path],
    create_hook: bool = True,
    update_requirements: bool = True,
) -> None:
    """
    Fully integrate CSV validation with a scraper project.

    Args:
        scraper_directory: Path to scraper project
        create_hook: Whether to create validation hook
        update_requirements: Whether to update requirements file
    """
    scraper_dir = Path(scraper_directory)

    print(f"🔧 Integrating CSV validation with scraper: {scraper_dir.name}")

    # Create integration helper
    integration = ScraperIntegration(scraper_dir)

    # Create validation hook
    if create_hook:
        hook_path = integration.create_validation_hook()
        print(f"Created validation hook: {hook_path}")

    # Update requirements if requested
    if update_requirements:
        requirements_file = scraper_dir / "requirements.txt"
        pyproject_file = scraper_dir / "pyproject.toml"

        if pyproject_file.exists():
            print("📦 Add to your pyproject.toml dependencies:")
            print(
                '    "csv-schema-validator @ git+https://github.com/huenique/csv-schema-validator.git"'
            )

        elif requirements_file.exists():
            print("📦 Add to your requirements.txt:")
            print(
                "    csv-schema-validator @ git+https://github.com/huenique/csv-schema-validator.git"
            )

        else:
            print("📦 Install validation framework:")
            print(
                "    pip install git+https://github.com/huenique/csv-schema-validator.git"
            )

    print(f"✅ Integration complete for {scraper_dir.name}")

    # Show usage instructions
    print("\\n📋 Usage Instructions:")
    print("1. Install csv-schema-validator in your scraper's environment")
    print("2. Run the validation hook after your scraper completes:")
    if create_hook:
        print(f"   ./validate_csv_outputs.sh")
    print("3. Check validation results and fix any issues")

    print("\\n🚀 Your scraper now has automated CSV validation!")
